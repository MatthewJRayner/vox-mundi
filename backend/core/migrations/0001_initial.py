# Generated by Django 5.2.5 on 2025-09-29 20:43

import colorfield.fields
import django.core.validators
import django.db.models.deletion
import taggit.managers
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Culture',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('code', models.SlugField(max_length=3)),
                ('colour', colorfield.fields.ColorField(default='#FFFFFF', image_field=None, max_length=25, samples=None)),
                ('picture', models.URLField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cultures', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Cultures',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('key', models.SlugField()),
                ('display_name', models.CharField(max_length=100)),
                ('culture', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='categories', to='core.culture')),
            ],
            options={
                'verbose_name_plural': 'Categories',
            },
        ),
        migrations.CreateModel(
            name='DateEstimate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_known', models.BooleanField(default=True)),
                ('date', models.DateField(blank=True, null=True)),
                ('date_estimate_start', models.IntegerField(blank=True, null=True)),
                ('date_estimate_end', models.IntegerField(blank=True, null=True)),
                ('date_precision', models.CharField(choices=[('exact', 'Exact'), ('year', 'Year'), ('decade', 'Decade'), ('century', 'Century'), ('millennium', 'Millennium'), ('unknown', 'Unknown')], default='unknown', max_length=20)),
            ],
            options={
                'verbose_name_plural': 'Date Estimates',
                'indexes': [models.Index(fields=['date_precision'], name='core_datees_date_pr_a73fd4_idx')],
            },
        ),
        migrations.CreateModel(
            name='LangLesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('rating', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('notes', models.TextField(blank=True)),
                ('topic', models.CharField(max_length=200)),
                ('lesson', models.TextField()),
                ('examples', models.TextField(blank=True)),
                ('level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')], max_length=50)),
                ('cultures', models.ManyToManyField(related_name='%(class)s_items', to='core.culture')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Language Lessons',
            },
        ),
        migrations.CreateModel(
            name='LanguageTable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=200)),
                ('table_data', models.JSONField(default=dict)),
                ('culture', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='language_tables', to='core.culture')),
            ],
            options={
                'verbose_name_plural': 'Language Tables',
            },
        ),
        migrations.CreateModel(
            name='PageContent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('intro_text', models.TextField(blank=True)),
                ('overview_text', models.TextField(blank=True)),
                ('extra_text', models.TextField(blank=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pages', to='core.category')),
                ('culture', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pages', to='core.culture')),
            ],
            options={
                'verbose_name_plural': 'Page Contents',
            },
        ),
        migrations.CreateModel(
            name='Period',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('section', models.CharField(max_length=100)),
                ('start_year', models.IntegerField()),
                ('end_year', models.IntegerField()),
                ('desc', models.TextField(blank=True)),
                ('short_intro', models.CharField(blank=True, max_length=255)),
                ('culture', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='periods', to='core.culture')),
            ],
            options={
                'verbose_name_plural': 'Periods',
            },
        ),
        migrations.CreateModel(
            name='MapPin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('type', models.CharField(max_length=50)),
                ('loc', models.JSONField()),
                ('external_links', models.URLField(blank=True, null=True)),
                ('culture', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='map_pins', to='core.culture')),
                ('period', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='map_pins', to='core.period')),
            ],
            options={
                'verbose_name_plural': 'Map Pins',
            },
        ),
        migrations.CreateModel(
            name='MapBorder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('borders', models.JSONField()),
                ('culture', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='map_borders', to='core.culture')),
                ('period', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='map_borders', to='core.period')),
            ],
            options={
                'verbose_name_plural': 'Map Borders',
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('given_name', models.CharField(max_length=100)),
                ('family_name', models.CharField(max_length=100)),
                ('middle_name', models.CharField(blank=True, max_length=100)),
                ('bio', models.TextField(blank=True)),
                ('photo', models.URLField(blank=True, null=True)),
                ('external_links', models.URLField(blank=True, null=True)),
                ('profession', models.CharField(blank=True, max_length=100)),
                ('nationality', models.CharField(blank=True, max_length=100)),
                ('birthplace', models.CharField(blank=True, max_length=100)),
                ('titles', models.CharField(blank=True, max_length=255)),
                ('epithets', models.CharField(blank=True, max_length=255)),
                ('resting_place', models.CharField(blank=True, max_length=255)),
                ('notable_works', models.JSONField(blank=True, default=list)),
                ('birth_date', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='births', to='core.dateestimate')),
                ('death_date', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deaths', to='core.dateestimate')),
            ],
            options={
                'verbose_name_plural': 'People',
            },
        ),
        migrations.CreateModel(
            name='MusicPiece',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=200)),
                ('external_links', models.URLField(blank=True, null=True)),
                ('instrument', models.CharField(blank=True, max_length=100)),
                ('recording', models.URLField(blank=True, null=True)),
                ('sheet_music', models.URLField(blank=True, null=True)),
                ('date', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.dateestimate')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.person')),
            ],
            options={
                'verbose_name_plural': 'Music Pieces',
            },
        ),
        migrations.CreateModel(
            name='HistoryEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=200)),
                ('external_links', models.URLField(blank=True, null=True)),
                ('type', models.CharField(max_length=100)),
                ('location', models.CharField(blank=True, max_length=200)),
                ('sources', models.TextField(blank=True)),
                ('significance_level', models.PositiveSmallIntegerField(default=0)),
                ('date', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.dateestimate')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('period', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='events', to='core.period')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.person')),
            ],
            options={
                'verbose_name_plural': 'History Events',
            },
        ),
        migrations.CreateModel(
            name='Film',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=200)),
                ('external_links', models.URLField(blank=True, null=True)),
                ('runtime', models.PositiveIntegerField(blank=True, null=True)),
                ('genre', models.CharField(blank=True, max_length=100)),
                ('date', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.dateestimate')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.person')),
            ],
            options={
                'verbose_name_plural': 'Films',
            },
        ),
        migrations.CreateModel(
            name='CalendarDate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('rating', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('notes', models.TextField(blank=True)),
                ('holiday_name', models.CharField(max_length=200)),
                ('date_text', models.CharField(blank=True, max_length=100)),
                ('calendar_date', models.DateField(blank=True, null=True)),
                ('traditions', models.TextField(blank=True)),
                ('meaning', models.TextField(blank=True)),
                ('photo', models.URLField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('cultures', models.ManyToManyField(related_name='%(class)s_items', to='core.culture')),
                ('person', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='holidays', to='core.person')),
            ],
            options={
                'verbose_name_plural': 'Calendar Dates',
            },
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=200)),
                ('external_links', models.URLField(blank=True, null=True)),
                ('isbn', models.CharField(blank=True, max_length=20)),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('date', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.dateestimate')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.person')),
            ],
            options={
                'verbose_name_plural': 'Books',
            },
        ),
        migrations.CreateModel(
            name='Artwork',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=200)),
                ('external_links', models.URLField(blank=True, null=True)),
                ('group', models.CharField(choices=[('artwork', 'Artwork'), ('artifact', 'Artifact')], max_length=100)),
                ('location', models.CharField(blank=True, max_length=200)),
                ('associated_culture', models.CharField(blank=True, max_length=200)),
                ('themes', models.TextField(blank=True)),
                ('photo', models.URLField(blank=True, null=True)),
                ('model_3d', models.URLField(blank=True, null=True)),
                ('type', models.CharField(blank=True, max_length=100)),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('date', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.dateestimate')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.person')),
            ],
            options={
                'verbose_name_plural': 'Artworks',
            },
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('rating', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('notes', models.TextField(blank=True)),
                ('name', models.CharField(max_length=200)),
                ('region', models.CharField(blank=True, max_length=100)),
                ('cooking_time', models.PositiveIntegerField(blank=True, help_text='Minutes', null=True)),
                ('ingredients', models.JSONField(default=list)),
                ('instructions', models.JSONField(default=list)),
                ('type', models.CharField(max_length=50)),
                ('course', models.CharField(max_length=50)),
                ('serving_size', models.CharField(blank=True, max_length=50)),
                ('photo', models.URLField(blank=True, null=True)),
                ('cultures', models.ManyToManyField(related_name='%(class)s_items', to='core.culture')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Recipes',
            },
        ),
        migrations.CreateModel(
            name='UniversalItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('object_id', models.PositiveIntegerField()),
                ('title', models.CharField(max_length=200)),
                ('type', models.CharField(max_length=50)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('cultures', models.ManyToManyField(related_name='universal_items', to='core.culture')),
            ],
            options={
                'verbose_name_plural': 'Universal Items',
            },
        ),
        migrations.CreateModel(
            name='UserArtwork',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('rating', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('notes', models.TextField(blank=True)),
                ('cultures', models.ManyToManyField(related_name='%(class)s_items', to='core.culture')),
                ('universal_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_artworks', to='core.universalitem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'User Artworks',
            },
        ),
        migrations.CreateModel(
            name='UserBook',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('rating', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('notes', models.TextField(blank=True)),
                ('page_count', models.PositiveIntegerField(blank=True, null=True)),
                ('is_history', models.BooleanField(default=False)),
                ('translated', models.BooleanField(default=False)),
                ('format', models.CharField(blank=True, max_length=50)),
                ('cover', models.URLField(blank=True, null=True)),
                ('date_started', models.DateField(blank=True, null=True)),
                ('date_finished', models.DateField(blank=True, null=True)),
                ('series', models.CharField(blank=True, max_length=200)),
                ('location', models.CharField(blank=True, max_length=200)),
                ('synopsis', models.TextField(blank=True)),
                ('owned', models.BooleanField(default=False)),
                ('cultures', models.ManyToManyField(related_name='%(class)s_items', to='core.culture')),
                ('universal_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_books', to='core.universalitem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'User Books',
            },
        ),
        migrations.CreateModel(
            name='UserFilm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('rating', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('notes', models.TextField(blank=True)),
                ('rewatch_count', models.PositiveIntegerField(default=0)),
                ('watch_location', models.CharField(blank=True, max_length=200)),
                ('medium', models.CharField(blank=True, max_length=100)),
                ('sound', models.BooleanField(default=True)),
                ('color', models.BooleanField(default=True)),
                ('date_watched', models.DateField(blank=True, null=True)),
                ('poster', models.URLField(blank=True, null=True)),
                ('background_pic', models.URLField(blank=True, null=True)),
                ('awards_won', models.JSONField(default=list)),
                ('cast', models.ManyToManyField(blank=True, related_name='films_cast', to='core.person')),
                ('crew', models.ManyToManyField(blank=True, related_name='films_crew', to='core.person')),
                ('cultures', models.ManyToManyField(related_name='%(class)s_items', to='core.culture')),
                ('universal_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_films', to='core.universalitem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'User Films',
            },
        ),
        migrations.CreateModel(
            name='UserHistoryEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('rating', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('notes', models.TextField(blank=True)),
                ('importance_rank', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('cultures', models.ManyToManyField(related_name='%(class)s_items', to='core.culture')),
                ('universal_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_history_events', to='core.universalitem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'User History Events',
            },
        ),
        migrations.CreateModel(
            name='UserMusicPiece',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('rating', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('notes', models.TextField(blank=True)),
                ('cultures', models.ManyToManyField(related_name='%(class)s_items', to='core.culture')),
                ('universal_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_music_pieces', to='core.universalitem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'User Music Pieces',
            },
        ),
        migrations.AddIndex(
            model_name='culture',
            index=models.Index(fields=['user', 'code'], name='core_cultur_user_id_eb3b70_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='culture',
            unique_together={('user', 'code')},
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['culture', 'key'], name='core_catego_culture_1991cf_idx'),
        ),
        migrations.AddIndex(
            model_name='langlesson',
            index=models.Index(fields=['user'], name='core_langle_user_id_f13012_idx'),
        ),
        migrations.AddIndex(
            model_name='period',
            index=models.Index(fields=['culture', 'section'], name='core_period_culture_508165_idx'),
        ),
        migrations.AddIndex(
            model_name='person',
            index=models.Index(fields=['family_name', 'given_name'], name='core_person_family__e0e69f_idx'),
        ),
        migrations.AddIndex(
            model_name='calendardate',
            index=models.Index(fields=['user'], name='core_calend_user_id_532859_idx'),
        ),
        migrations.AddIndex(
            model_name='recipe',
            index=models.Index(fields=['user'], name='core_recipe_user_id_631a5c_idx'),
        ),
        migrations.AddIndex(
            model_name='universalitem',
            index=models.Index(fields=['content_type', 'object_id'], name='core_univer_content_34bb10_idx'),
        ),
        migrations.AddIndex(
            model_name='userartwork',
            index=models.Index(fields=['user', 'universal_item'], name='core_userar_user_id_365846_idx'),
        ),
        migrations.AddIndex(
            model_name='userbook',
            index=models.Index(fields=['user', 'universal_item'], name='core_userbo_user_id_4fb54c_idx'),
        ),
        migrations.AddIndex(
            model_name='userfilm',
            index=models.Index(fields=['user', 'universal_item'], name='core_userfi_user_id_583050_idx'),
        ),
        migrations.AddIndex(
            model_name='userhistoryevent',
            index=models.Index(fields=['user', 'universal_item'], name='core_userhi_user_id_2b737d_idx'),
        ),
        migrations.AddIndex(
            model_name='usermusicpiece',
            index=models.Index(fields=['user', 'universal_item'], name='core_usermu_user_id_7de088_idx'),
        ),
    ]
